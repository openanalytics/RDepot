/**
 * R Depot
 *
 * Copyright (C) 2012-2022 Open Analytics NV
 *
 * ===========================================================================
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the Apache License as published by
 * The Apache Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Apache License for more details.
 *
 * You should have received a copy of the Apache License
 * along with this program.  If not, see <http://www.apache.org/licenses/>
 */
package eu.openanalytics.rdepot.model;

// Generated Jun 24, 2013 12:33:03 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import eu.openanalytics.rdepot.api.v2.dto.EntityDto;
import eu.openanalytics.rdepot.api.v2.dto.RepositoryMaintainerDto;

/**
 * RepositoryMaintainer generated by hbm2java
 */
@Entity
@Table(name = "repository_maintainer", schema = "public")
public class RepositoryMaintainer implements java.io.Serializable, IEntity<RepositoryMaintainer>
{

	/**
	 * 
	 */
	private static final long serialVersionUID = -4777719081696051407L;
	private int id;
	private User user;
	private Repository repository;
	private boolean deleted = false;
	private Set<RepositoryMaintainerEvent> repositoryMaintainerEvents = new HashSet<RepositoryMaintainerEvent>(0);

	public RepositoryMaintainer()
	{
	}

	public RepositoryMaintainer(int id, User user, Repository repository, boolean deleted)
	{
		this.id = id;
		this.user = user;
		this.repository = repository;
		this.deleted = deleted;
	}
	
	public RepositoryMaintainer(int id, User user, Repository repository, 
			boolean deleted, Set<RepositoryMaintainerEvent> repositoryMaintainerEvents)
	{
		this.id = id;
		this.user = user;
		this.repository = repository;
		this.repositoryMaintainerEvents = repositoryMaintainerEvents;
		this.deleted = deleted;
	}

	public RepositoryMaintainer(RepositoryMaintainer that) {
		this.deleted = that.isDeleted();
		this.repository = that.getRepository();
		this.user = that.getUser();
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	public int getId()
	{
		return this.id;
	}

	public void setId(int id)
	{
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "user_id", nullable = false)
	//@JsonManagedReference(value="user-repository-maintainers")
//	@JsonIgnore
	public User getUser()
	{
		return this.user;
	}

	public void setUser(User user)
	{
		this.user = user;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "repository_id", nullable = false)
	//@JsonManagedReference(value="repository-maintainers")
//	@JsonIgnore
	public Repository getRepository()
	{
		return this.repository;
	}

	public void setRepository(Repository repository)
	{
		this.repository = repository;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "repositoryMaintainer")
	//@JsonBackReference(value="repository-maintainer-events")
	public Set<RepositoryMaintainerEvent> getRepositoryMaintainerEvents()
	{
		return this.repositoryMaintainerEvents;
	}

	public void setRepositoryMaintainerEvents(Set<RepositoryMaintainerEvent> repositoryMaintainerEvents)
	{
		this.repositoryMaintainerEvents = repositoryMaintainerEvents;
	}
	
	@Column(name = "deleted", nullable = false)
	public boolean isDeleted()
	{
		return this.deleted;
	}

	public void setDeleted(boolean deleted)
	{
		this.deleted = deleted;
	}

	@Override
	public EntityDto<RepositoryMaintainer> createDto() {
		return new RepositoryMaintainerDto(this);
	}
}
