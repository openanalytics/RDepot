buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.5.12"
        classpath("io.spring.gradle:dependency-management-plugin:1.0.14.RELEASE")                   	    
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.16.1"
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.avast.gradle.docker-compose' version '0.14.3'
    id 'org.springframework.boot' version '2.5.12'
    id "org.owasp.dependencycheck" version "8.2.1"
    id 'org.liquibase.gradle' version '2.0.4'
}

jar {
	enabled = false
}

bootJar {
    enabled = false
}

apply from: 'dependencies.gradle'
def globalConf = rootProject.ext

import java.text.SimpleDateFormat
import java.util.Date

ext.buildTime = {
	def Date today = new Date ()
	  	SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd.hhmmss")
	  	return sdf.format(today)
}

group = 'eu.openanalytics'
ext.versionNumber = '1.7.7'
ext.baseVersion = versionNumber
version = versionNumber
description = """rdepot"""

task printVersion {
    doLast {
        println project.version
    }
}

repositories {
    mavenCentral()
    jcenter()
}

/*subprojects {
    dependencies {
        implementation project(':common')
    }
}*/


dependencies {
	Map<String, String> dependencies = globalConf.commonDependencies
	testImplementation project('rdepot-app')  	
  	
	testImplementation dependencies.sbStarterTest
	testImplementation dependencies.springSecurityTest
	testImplementation dependencies.restAssured
	testImplementation dependencies.restAssuredJsonPath
	testImplementation dependencies.restAssuredXmlPath
	testImplementation dependencies.jsonSimple
	testImplementation dependencies.gson
	testImplementation dependencies.pdfbox
    testImplementation dependencies.testcontainers
    testImplementation dependencies.selenium
    testImplementation dependencies.chromeDriver
    testImplementation dependencies.jacksonDatabind
    testImplementation dependencies.jacksonCore
    
    liquibaseRuntime dependencies.liquibaseCore
	liquibaseRuntime dependencies.postgresql
	liquibaseRuntime dependencies.snakeYaml
	liquibaseRuntime("ch.qos.logback:logback-core:1.2.3")
  	liquibaseRuntime("ch.qos.logback:logback-classic:1.2.3")           

    testImplementation dependencies.awaitility
    testImplementation dependencies.commonsIO
	testImplementation dependencies.greenmail
	testImplementation dependencies.awaitility
}

sourceSets {
	integrationTest {
		resources {
			exclude '**/itest*/**'
		}
		java {
			srcDir file('src/integration-test/java')
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
		}
		resources.srcDir file('src/integration-test/resources')
	}	
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
}

allprojects {
    apply plugin: 'license'
    license {    
	    header rootProject.file('./LICENSE_HEADER')
	    strictCheck true
	    ext.year = Calendar.getInstance().get(Calendar.YEAR)
	    ext.company = 'Open Analytics NV'
	    excludes(['**/*.html', '**/*.Rmd', '**/*.tar.gz', '**/DESCRIPTION', '**/DESCRIPTION_NEWLINES', '**/*.properties', '**/*.ttf', '**/*.eot', '**/*.woff', '**/*.css', '**/*.js', '**/*.svg', '**/*.png', '**/*.ico', '**/*.old', '**/*.sql', '**/*.yaml', '**/*.xml', '**/*.json', 
	    			'**/*.yml', '**/NEWS', '**/LICENSE', '**/*.txt' , '**/NAMESPACE', '**/*.Rd', '**/*.pdf', '**/*.R', '**/*.c', '**/*.cpp', '**/*.h', '**/*.tex', '**/*.sh', '**/*.rda', '**/*.ldif', '**/*.gz', '**/*.bk*', '**/*.gradle', '**/*.xsd' ])
	    			//the above exclusions are for integration testing purposes
	}
}


dependencyCheck {
    format='ALL'
    suppressionFile='owasp-suppression.xml'    
}

def props = new Properties()
file("liquibase.properties").withInputStream { props.load(it) }

task liquibase {
	liquibase {
	    activities {
	        main {
	            changeLogFile props.getProperty("changeLogFile")
	            url props.getProperty("url")
	            username props.getProperty("username")
	            password props.getProperty("password")
	            //diffTypes 'data'
	        }
	    } 
	}
}

task setHttpProxyFromEnv {
    def map = ['HTTP_PROXY': 'http', 'HTTPS_PROXY': 'https']
    for (e in System.getenv()) {
        def key = e.key.toUpperCase()
        if (key in map) {
            def base = map[key]
            def url = e.value.toURL()
            println " - systemProp.${base}.proxy=${url.host}:${url.port}"
            System.setProperty("${base}.proxyHost", url.host.toString())
            System.setProperty("${base}.proxyPort", url.port.toString())
        } else if (key.equals('NO_PROXY')) {
            def nonProxyHosts = String.valueOf(e.value).replace(",", "|")
            if (nonProxyHosts.contains("openanalytics.eu")) {
                nonProxyHosts += "|*.openanalytics.eu"
            }
            println " - systemProp.http.nonProxyHosts=${nonProxyHosts}"
            println " - systemProp.https.nonProxyHosts=${nonProxyHosts}"
            System.setProperty("http.nonProxyHosts", nonProxyHosts)
            System.setProperty("https.nonProxyHosts", nonProxyHosts)
        }
    }
}

tasks.withType(Test) {
	maxParallelForks = 1
}

import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Path

task untar(type: Copy) {
    // dependsOn download
    from tarTree('src/integration-test/resources/itestSource.tar.gz')
    into 'src/integration-test/resources'
    doLast {task -> println "untarred" }
}

task buildApp(type: War) {
    dependsOn(':rdepot-app:build')
    doLast { task -> println "app binary built" }
}

task buildRepo(type: Jar) {
    dependsOn(':rdepot-repo:build')
    doLast { task -> println "repo binary built" }
}

task publishApp {
    dependsOn(':rdepot-app:publish')
    doLast { task -> println "app published" }
}

task publishRepo {
    dependsOn(':rdepot-repo:publish')
    doLast { task -> println "repo published" }
}

task copyRepoBinaries(type: Copy) {
    dependsOn tasks.findByName('buildRepo')
    from "repo/build/libs"
    include "rdepot-repo*application.jar"
    into "src/integration-test/resources/docker/repo"
    rename '(.+).jar', 'rdepot-repo.jar'
    doLast { task -> println "repo binary copied" }
}

task copyAppBinaries(type: Copy) {
    dependsOn tasks.findByName('buildApp')
    from "app/build/libs"
    include "rdepot-app*application.war"
    into "src/integration-test/resources/docker/app"
    rename '(.+).war', 'rdepot.war'
    doLast { task -> println "app binary copied" }
}

task removeSources(type: GradleBuild) {
    buildFile = './src/integration-test/resources/build.gradle'
	tasks = ['removeSources']
}


dockerCompose {    
    useComposeFiles = ['src/integration-test/resources/docker-compose.yaml']
    captureContainersOutput = true
    waitForTcpPortsTimeout = java.time.Duration.ofMinutes(60)
    waitForHealthyStateTimeout = java.time.Duration.ofMinutes(60)
}

tasks.findByName('test').dependsOn gradle.includedBuilds*.task(':test')
tasks.clean.dependsOn(tasks.removeSources)
tasks.clean.dependsOn(tasks.composeDown)

task integrationTest (type:Test) {
	dependsOn untar
	dependsOn composeUp
	dependsOn copyAppBinaries
	dependsOn copyRepoBinaries
	composeUp.mustRunAfter untar
	composeUp.mustRunAfter copyAppBinaries
	composeUp.mustRunAfter copyRepoBinaries
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
    finalizedBy composeDown
    finalizedBy removeSources
}

tasks.findByName('integrationTest').mustRunAfter buildApp
tasks.findByName('integrationTest').mustRunAfter buildRepo
tasks.findByName('test').mustRunAfter buildApp
tasks.findByName('test').mustRunAfter buildRepo

tasks.findByName('build').dependsOn integrationTest
tasks.findByName('build').dependsOn buildApp
tasks.findByName('build').dependsOn buildRepo

tasks.findByName('buildApp').dependsOn dependencyCheckAggregate

build.dependsOn setHttpProxyFromEnv

task publish {
    dependsOn setHttpProxyFromEnv
    dependsOn publishApp
    dependsOn publishRepo
    publishApp.mustRunAfter setHttpProxyFromEnv
    publishRepo.mustRunAfter setHttpProxyFromEnv
}

class MyDownload extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
       ant.get(src: sourceUrl, dest: target)
    }
}

ext.maven = {
    def releasesRepoUrl = "https://nexus.openanalytics.eu/repository/releases"
    def snapshotsRepoUrl = "https://nexus.openanalytics.eu/repository/snapshots"
    url = baseVersion.contains('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    credentials {
        username = System.getenv("OA_NEXUS_USER")
        password = System.getenv("OA_NEXUS_PWD")
    }
}
